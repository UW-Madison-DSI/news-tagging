from typing import Any
import streamlit as st
from pydantic import BaseModel
from datetime import datetime


class Post(BaseModel):
    id: str
    pub_date: datetime
    title: str
    summary: str
    content: str
    category: list[str]
    post_tag: list[str]
    syndication: list[str]

    # Custom tags
    tags_gpt: list[str] = []
    tags_user: list[str] = []

    @property
    def tags_original(self) -> list[str]:
        return self.post_tag + self.category

    @property
    def tags(self) -> list[str]:
        return self.tags_original + self.tags_gpt + self.tags_user


# Utilities
def get_all_tags(posts: list[Post]) -> list[str]:
    """Get all tags from all posts."""

    tags = []
    for post in posts:
        tags.extend(post.tags)

    return sorted(list(set(tags)))


def filter_posts(posts: list[Post], tags: list[str]) -> list[Post]:
    """Filter posts by tag."""
    if not tags:
        return posts

    filter_tags = set(tags)
    return [post for post in posts if len(set(post.tags).intersection(filter_tags)) > 0]


def header_to_tags(header: str, post: Post) -> str:
    mapping = {
        "Original tags": post.tags_original,
        "GPT-4 tags": post.tags_gpt,
        "User tags": post.tags_user,
    }
    return ", ".join(mapping[header])


def format_user_input(user_input: str) -> list[str]:
    """Format user input into a list of tags."""
    if user_input:
        return [tag.strip().title() for tag in user_input.split(",")]
    else:
        return []


# Components
def splash_screen_component():
    st.title("UW News tagging (prototype)")

    st.markdown(
        """
        This demo compares the original tags from UW News articles,
        sourced from the [news feed](https://news.wisc.edu/feed),
        with tags that are generated by GPT-4. These newly generated tags are
        derived from both the title and the complete content of each article.

        [Core prompt engineering code](https://github.com/UW-Madison-DSI/news-tagging/blob/00d2a7d5f5a95ea80549664040648db5f4743e69/gpt.py#L12C1-L27C6)

        ### 🏃 Click the "Run" button on the left sidebar to get started.

        """
    )


def tag_filter_component(tags) -> None:
    """Tag filter component."""

    st.subheader("🏷️ Filter articles by Tags")
    st.session_state.filter_selection = st.multiselect("Select tags to filter", tags)


def posts_component(posts: list[Post], with_user_tag: bool) -> None:
    """Posts component."""

    n_columns = 3 if with_user_tag else 2
    tags_headers = ["Original tags", "GPT-4 tags", "User tags"][:n_columns]
    display_posts = filter_posts(posts, st.session_state.filter_selection)

    # Layout
    st.header("📰 UW News articles")

    if st.session_state.user_tags:
        st.write(f"Your custom tags: {st.session_state.user_tags}")

    for post in display_posts:
        st.subheader(post.title)
        st.write(f"Summary: {post.summary}")

        columns = st.columns(n_columns, gap="medium")

        for i, col in enumerate(columns):
            header = tags_headers[i]
            col.subheader(header)
            col.write(header_to_tags(header, post))

        with st.expander("🔎 Show technical details"):
            st.json(post.model_dump_json())
