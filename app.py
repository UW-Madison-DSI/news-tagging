import logging
import asyncio
import streamlit as st
from cachetools import TTLCache, cached

from data_loader import Post, download_posts, load_posts, get_all_tags, filter_posts
from gpt import tag, batch_user_tag

st.set_page_config(page_title="UW News tagging", page_icon="üì∞", layout="wide")
st.session_state.filter_selection = None
st.session_state.ran = False


@cached(cache=TTLCache(maxsize=1, ttl=60))
def get_posts() -> list[Post]:
    """Update and get all posts."""

    existing_posts = load_posts()
    live_posts = download_posts()
    exist_ids = [p.id for p in existing_posts]

    # Filter out posts that are already exist
    new_posts = [post for post in live_posts if post.id not in exist_ids]

    # Tag and save new posts
    for post in new_posts:
        logging.info(f"Tagging new post {post.id}")
        post.tags_gpt = tag(post.title, post.content)
        post.save()

    existing_posts.extend(new_posts)
    return existing_posts


async def append_user_tags(posts: list[Post], user_tags: list[str]) -> list[Post]:
    titles = [post.title for post in posts]
    contents = [post.content for post in posts]
    news_user_tags = await batch_user_tag(titles, contents, user_tags)
    for post, tags in zip(posts, news_user_tags):
        post.tags_user = tags
    return posts


def format_user_input(user_input: str) -> list[str]:
    """Format user input into a list of tags."""
    if user_input:
        return [tag.strip().title() for tag in user_input.split(",")]
    else:
        return []


def header_to_tags(header: str, post: Post) -> str:
    mapping = {
        "Original tags": post.tags_original,
        "GPT-4 tags": post.tags_gpt,
        "User tags": post.tags_user,
    }
    return ", ".join(mapping[header])


main_screen = st.container()


def tag_filter_component(tags) -> None:
    """Tag filter component."""

    with st.expander("üè∑Ô∏è Filter articles by Tags"):
        # Show tags in a grid
        N_TAGS_PER_ROW = 5
        for i in range(0, len(tags), N_TAGS_PER_ROW):
            row_tags = tags[i : i + N_TAGS_PER_ROW]

            # Put tags button in a row
            for tag, col in zip(row_tags, st.columns(N_TAGS_PER_ROW)):
                if col.button(tag, use_container_width=True):
                    st.session_state.filter_selection = tag


def posts_component(posts: list[Post], with_user_tag: bool) -> None:
    """Posts component."""

    n_columns = 3 if with_user_tag else 2
    tags_headers = ["Original tags", "GPT-4 tags", "User tags"][:n_columns]

    display_posts = filter_posts(posts, st.session_state.filter_selection)
    for post in display_posts:
        st.subheader(post.title)
        st.write(f"Summary: {post.summary}")

        columns = st.columns(n_columns, gap="medium")

        for i, col in enumerate(columns):
            header = tags_headers[i]
            col.subheader(header)
            col.write(header_to_tags(header, post))

        with st.expander("üîé Show technical details"):
            st.json(post.model_dump_json())


def run(user_input: str) -> None:
    """Run the app."""

    st.session_state.ran = True
    posts = get_posts()

    # Process user tags
    if user_tags := format_user_input(user_input):
        posts = asyncio.run(append_user_tags(posts, user_tags))

    tags = get_all_tags(posts)

    with main_screen:
        st.header("üì∞ UW News articles")

        if user_input:
            st.write(f"Your custom tags: {user_tags}")

        # Show tag filter component
        tag_filter_component(tags)

        # Show posts component
        posts_component(posts, with_user_tag=bool(user_tags))


# Sidebar
with st.sidebar:
    st.subheader("üè∑Ô∏è User defined tags")
    st.write(
        "You can choose to provide a list of custom tags to change the way the system categorizes news."
    )
    user_input = st.text_input(
        "Optionally enter a list of custom tags (comma separated)",
        key="custom_tags",
        placeholder="e.g. physics, astronomy, space, psychology",
    )

    if st.button("Run"):
        run(user_input)


# Splash screen
def splash_screen():
    st.title("UW News tagging (prototype)")

    """
    This demo compares the original tags from UW News articles, 
    sourced from the [news feed](https://news.wisc.edu/feed), 
    with tags that are generated by GPT-4. These newly generated tags are 
    derived from both the title and the complete content of each article.

    [Core prompt engineering code](https://github.com/UW-Madison-DSI/news-tagging/blob/00d2a7d5f5a95ea80549664040648db5f4743e69/gpt.py#L12C1-L27C6)
    """


with main_screen:
    if not st.session_state.ran:
        splash_screen()
